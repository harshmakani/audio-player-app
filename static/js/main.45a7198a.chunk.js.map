{"version":3,"sources":["components/AudioPlayer.js","App.js","index.js"],"names":["AudioPlayer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateProgress","duration","audioContainer","currentTime","progress","setState","timeLeft","end","handleNext","handleAdjustProgress","e","progressContainer","clientX","getBoundingClientRect","left","clientWidth","play","handleToggle","state","pause","handlePrev","currentSongIndex","total","playListData","tracks","length","index","_playSong","autoPlay","addEventListener","removeEventListener","_this2","time","isNaN","mins","Math","floor","secs","toFixed","concat","_this3","_this$state","currentSong","progressStyle","width","react_default","a","createElement","className","preload","ref","src","url","cover_image","alt","name","onClick","style","artist","_formatTime","React","Component","defaultProps","App","src_components_AudioPlayer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.45a7198a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './AudioPlayer.css';\n\nclass AudioPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentSongIndex: 0,\n      timeLeft: 0,\n      play: this.props.autoPlay || false,\n      progress: 0,\n    };\n  }\n\n  /**\n   * Getting reference of autioContainer from audio Element\n   * and adding timeupdate and ended eventlistener to track changes\n   */\n  componentDidMount() {\n    const audioContainer = this.audioContainer;\n    audioContainer.addEventListener('timeupdate', this.updateProgress);\n    audioContainer.addEventListener('ended', this.end);\n  }\n\n  /**\n   * Removing reference of autioContainer and removing timeupdate and ended eventlistener\n   */\n  componentWillUnmount() {\n    const audioContainer = this.audioContainer;\n    audioContainer.removeEventListener('timeupdate', this.updateProgress);\n    audioContainer.removeEventListener('ended', this.end);\n  }\n\n  /**\n   * Helper method to play song\n   * updates index of the song playing, resets timeleft of the song playing and progress\n   * @param {Integer} index\n   */\n  _playSong(index) {\n    this.setState(\n      {\n        currentSongIndex: index,\n        timeLeft: 0,\n        play: true,\n        progress: 0,\n      },\n      () => {\n        this.audioContainer.currentTime = 0;\n        this.audioContainer.play();\n      }\n    );\n  }\n\n  /**\n   * Helper method to format and update the remaining time to be displayed for currentSong\n   * @param {Integer} time\n   */\n  _formatTime(time) {\n    if (isNaN(time) || time === 0) {\n      return;\n    }\n    const mins = Math.floor(time / 60);\n    const secs = (time % 60).toFixed();\n    return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n  }\n\n  /**\n   * Helper method to track and update progress of current song\n   */\n  updateProgress = () => {\n    const duration = this.audioContainer.duration;\n    const currentTime = this.audioContainer.currentTime;\n    const progress = currentTime / duration;\n    this.setState({\n      progress: progress,\n      timeLeft: duration - currentTime,\n    });\n  };\n\n  end = () => {\n    this.handleNext();\n  };\n\n  /**\n   * Helper method to update progress bar and current song being played when user clicks\n   * on the progress bar\n   */\n  handleAdjustProgress = e => {\n    const progressContainer = this.progressContainer;\n    const progress =\n      (e.clientX - progressContainer.getBoundingClientRect().left) /\n      progressContainer.clientWidth;\n    const currentTime = this.audioContainer.duration * progress;\n    this.audioContainer.currentTime = currentTime;\n    this.setState(\n      {\n        play: true,\n        progress: progress,\n      },\n      () => {\n        this.audioContainer.play();\n      }\n    );\n  };\n\n  /**\n   * Toggle between play and pause\n   */\n  handleToggle = () => {\n    this.state.play ? this.audioContainer.pause() : this.audioContainer.play();\n    this.setState({ play: !this.state.play });\n  };\n\n  /**\n   * Play previous song\n   * (Checks the condition when the current song is the first, then goes to the last song of the playlist)\n   */\n  handlePrev = () => {\n    const { currentSongIndex } = this.state;\n    const total = this.props.playListData.tracks.length;\n    const index = currentSongIndex > 0 ? currentSongIndex - 1 : total - 1;\n    this._playSong(index);\n  };\n\n  /**\n   * Play next song\n   * (Checks the condition when the current song is the last, then goes to the first song of the playlist)\n   */\n  handleNext = () => {\n    const { currentSongIndex } = this.state;\n    const total = this.props.playListData.tracks.length;\n    const index = currentSongIndex < total - 1 ? currentSongIndex + 1 : 0;\n    this._playSong(index);\n  };\n\n  render() {\n    const { playListData } = this.props;\n    const { currentSongIndex, timeLeft, play, progress } = this.state;\n    const currentSong = playListData.tracks[currentSongIndex];\n    const progressStyle = {\n      width: `${progress * 100}%`,\n    };\n\n    return (\n      <div className='ap-container'>\n        {/* Audio Element Starts */}\n        <audio\n          autoPlay={play}\n          preload='auto'\n          ref={ref => {\n            this.audioContainer = ref;\n          }}\n          src={currentSong.url}\n        />\n        {/* Audio Element Ends */}\n\n        {/* Album Cover Starts */}\n        <div className='ap-album-cover'>\n          <img src={currentSong.cover_image} alt={currentSong.name} />\n        </div>\n        {/* Album Cover Ends */}\n\n        {/* Audio Player Controls Start */}\n        <div className='ap-controls'>\n          {/* Audio Player Buttons(back, forward, play/pause) Start */}\n          <div className='ap-controls-left'>\n            <i className='ap-step-backward' onClick={this.handlePrev} />\n            <i\n              className={`ap-${play ? 'pause' : 'play'}`}\n              onClick={this.handleToggle}\n            />\n            <i className='ap-step-forward' onClick={this.handleNext} />\n          </div>\n          {/* Audio Player Buttons Ends */}\n\n          {/*Audio Player Song Description Details Start  */}\n          <div className='ap-controls-right'>\n            <div className='ap-album-name'>{currentSong.name}</div>\n            <div\n              className='ap-progress-container'\n              onClick={this.handleAdjustProgress}\n              ref={ref => {\n                this.progressContainer = ref;\n              }}\n            >\n              <div className='ap-progress' style={progressStyle} />\n            </div>\n            <div className='ap-artist'>\n              <div className='ap-artist-name'>{playListData.artist}</div>\n              <div className='ap-timeleft'>{this._formatTime(timeLeft)}</div>\n            </div>\n          </div>\n          {/*Audio Player Song Description Details End  */}\n        </div>\n        {/* Audio Player Controls Ends */}\n      </div>\n    );\n  }\n\n  static propTypes = {\n    autoPlay: PropTypes.bool,\n    playListData: PropTypes.object.isRequired,\n  };\n\n  static defaultProps = {\n    autoPlay: false,\n    playListData: {},\n  };\n}\n\nexport default AudioPlayer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport playListData from './data/fed_home_assignment_api.json';\nimport AudioPlayer from './components/AudioPlayer';\n\n/**\n * Considering base scenario where App component is the root component of application\n * and apart from AudioPlayer component, other components can also be added.\n *\n * Loading Audio Player from local dataset\n */\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        {/* playListData is a required prop for AudioPlayer Component. AudioPlayer also has another prop to autoplay. Pass autoPlay=`true` to start playing song on load.  */}\n        <AudioPlayer playListData={playListData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}